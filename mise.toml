
[settings]
  experimental = true
  lockfile     = true
  auto_install = false

[tools]
  "npm:@infisical/cli" = "0.41.99"
  dprint               = "0.50.1"
  "cargo:taplo-cli"    = "0.10.0"
  python               = "3.13"
  uv                   = "0.8.16"

[env]
  # Project environment variables
  PYTHONPATH   = "."
  PROJECT_NAME = "jet-lag-munich"
  ENV          = "development"

  # Tool configurations
  RUFF_CACHE_DIR   = ".ruff_cache"
  PYTEST_CACHE_DIR = ".pytest_cache"
  TY_CONFIG_FILE   = "{{config_root}}/.toolchain/python/ty/base.toml"

  # Manim optimization environment variables
  MANIM_RENDERER       = "opengl" # Use GPU acceleration when available
  OMP_NUM_THREADS      = "32"     # Optimize for high-core-count CPUs (adjust for your system)
  NUMBA_NUM_THREADS    = "32"     # Optimize NumPy/scientific computing
  OPENBLAS_NUM_THREADS = "32"     # Optimize linear algebra operations
  MKL_NUM_THREADS      = "32"     # Intel Math Kernel Library optimization

[tasks.setup]
  description = "Initial project setup"
  run = """
uv sync --dev
echo "✅ Project setup complete!"
"""

[tasks.format]
  run = "dprint fmt"

[tasks."format:ci"]
  run = "dprint check"

[tasks."lint:ruff"]
  description = "Lint code with ruff"
  run         = "uv run ruff check ."

[tasks."lint:taplo"]
  description = "Lint code with taplo"
  run         = "taplo lint --no-schema"

[tasks."lint:infisical"]
  description = "Scan for secrets checked into code using Infisical"
  run         = "infisical scan"

[tasks.lint]
  depends = ["lint:*"]

[tasks."lint:ci"]
  depends = ["lint:ruff --output-format=github", "lint:taplo", "lint:infisical"]

[tasks.lint-fix]
  description = "Lint and auto-fix code with ruff"
  run         = "uv run ruff check --fix ."

[tasks."typecheck:pyright"]
  description = "Type check with pyright"
  run         = "uv run pyright"

[tasks."typecheck:ty"]
  description = "Type check with ty"
  run         = "uv run ty check"

[tasks.typecheck]
  depends = ["typecheck:*"]

[tasks.test]
  description = "Run tests with pytest"
  run         = "uv run pytest"

[tasks."test:verbose"]
  description = "Run tests with verbose output"
  run         = "uv run pytest -vv"

[tasks."test:cov"]
  description = "Run tests with coverage"
  run         = "uv run pytest --cov=core --cov-report=term-missing --cov-report=json:coverage.json"

[tasks."test:fast"]
  description = "Run fast tests only"
  run         = "uv run pytest -m \"not slow\""

[tasks."test:fast:ci"]
  description = "Run fast tests only for CI"
  run         = "mise run test:fast --junit-xml=results/pytest-junit.xml"

[tasks."test:slow"]
  description = "Run slow tests only"
  run         = "uv run pytest -m slow"
  sources     = ["tests/test_visual.py", "tests/*.py", "core/**/*.py"]

[tasks."test:slow:ci"]
  description = "Run slow tests only"
  run         = "mise run test:slow --junit-xml=results/pytest-slow-junit.xml"

[tasks.check]
  description = "Run all checks (format, lint, typecheck, test)"
  depends     = ["format", "typecheck", "lint", "test"]
  wait_for    = ["format"]

[tasks.clean]
  description = "Clean project artifacts"
  run = """
rm -rf build/
rm -rf dist/
rm -rf *.egg-info
rm -rf .ruff_cache/
rm -rf .pytest_cache/
rm -rf .coverage
rm -rf htmlcov/
rm -rf .mypy_cache/
find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
find . -type f -name "*.pyc" -delete
uv clean
echo "✅ Cleaned project artifacts"
"""

[tasks.build]
  description = "Build distribution packages"
  run         = "uv build"

[tasks.gen]
  run = "uv run map"

# Manim animation tasks
[tasks."manim:test"]
  description = "Test timeline animation components"
  run         = "uv run python test_timeline_animation.py"

[tasks."manim:simple"]
  description = "Generate simple timeline animation (low quality, fast)"
  run         = "uv run manim -pql animate_timeline_simple_nyc.py SimpleTimelineAnimation"

[tasks."manim:real-nyc"]
  description = "Generate animation with real NYC subway system (requires component-19.json)"
  run         = "uv run manim -pql animate_timeline_real_nyc.py RealNYCTransitAnimation"

[tasks."manim:hq"]
  description = "Generate high-quality timeline animation"
  run         = "uv run manim -pqh animate_timeline_real_nyc.py RealNYCTransitAnimation"

[tasks."manim:4k"]
  description = "Generate 4K timeline animation (gaming PC recommended)"
  run         = "uv run manim --resolution 3840,2160 -qh animate_timeline_real_nyc.py RealNYCTransitAnimation"

[tasks."manim:60fps"]
  description = "Generate 60fps timeline animation"
  run         = "uv run manim --fps 60 -qh animate_timeline_real_nyc.py RealNYCTransitAnimation"

[tasks."manim:gif"]
  description = "Generate GIF version of timeline animation"
  run         = "uv run manim -pql --format=gif animate_timeline_real_nyc.py RealNYCTransitAnimation"

[tasks."manim:clean"]
  description = "Clean Manim output files"
  run = """
rm -rf media/
rm -f *.png
rm -f *transit_map*.png
echo "✅ Cleaned Manim output files"
"""
